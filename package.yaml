# SPDX-FileCopyrightText: 2022 Serokell <https://serokell.io>
#
# SPDX-License-Identifier: MPL-2.0

name:                tztime
version:             0.1.0.0
github:              serokell/tztime
license:             MPL-2.0
license-file:        LICENSE
author:              Serokell
maintainer:          Serokell <hi@serokell.io>
copyright:           2022 Serokell <https://serokell.io>
category:            Time
homepage:            https://github.com/serokell/tztime
bug-reports:         https://github.com/serokell/tztime/issues
synopsis:            Safe timezone-aware handling of time.
description: |
  This package introduces:

  * The `TZTime` data type, a valid and unambiguous point in time in some time zone.
  * Functions for safely manipulating a `TZTime`.

extra-source-files:
- README.md

tested-with:
  - GHC == 8.10.7
  - GHC == 9.0.2
  - GHC == 9.2.8
  - GHC == 9.4.7

library:
  source-dirs: src
  dependencies:
  - base >= 4.7 && < 5
  - deepseq
  - directory >= 1.3.1.0
  - filepath
  - mtl
  - safe-exceptions
  - template-haskell >= 2.16.0.0
  - text
  - time >= 1.9.2
  - time-compat >= 1.9.4
  - tz >= 0.1.3.4

tests:
  tztime-test:
    main:                Main.hs
    source-dirs:         test
    build-tools:         tasty-discover:tasty-discover
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - base >= 4.7 && < 5
    - tasty
    - tasty-hunit-compat
    - template-haskell
    - time
    - time-compat
    - tztime
    - th-test-utils

  tztime-doctest:
    main: Main.hs
    source-dirs: doctest
    ghc-options:
    - -threaded
    dependencies:
    - base
    - doctest-parallel

ghc-options:
  - -Weverything
  - -Wno-implicit-prelude
  - -Wno-name-shadowing
  - -Wno-missing-import-lists
  - -Wno-missing-export-lists
  - -Wno-unsafe
  - -Wno-safe
  - -Wno-missing-safe-haskell-mode
  - -Wno-prepositive-qualified-module
  - -Wno-monomorphism-restriction
  - -Wno-missed-specialisations
  - -Wno-all-missed-specialisations
when:
  - condition: impl(ghc >= 9.2)
    ghc-options:
      - -Wno-missing-kind-signatures

default-extensions:
  - AllowAmbiguousTypes
  - ApplicativeDo
  - BangPatterns
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - ImportQualifiedPost
  - InstanceSigs
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NegativeLiterals
  - NumDecimals
  - NumericUnderscores
  - OverloadedLabels
  - OverloadedStrings
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - StandaloneKindSignatures
  - StrictData
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - UndecidableInstances
  - UndecidableSuperClasses
  - ViewPatterns
